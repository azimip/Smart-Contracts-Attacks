/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  SimpleAttack,
  SimpleAttackInterface,
} from "../../Simple-Attack.sol/SimpleAttack";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "target",
        type: "address",
      },
    ],
    name: "attack",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052610121806100136000396000f3fe608060405260043610601f5760003560e01c8063d018db3e14602a576025565b36602557005b600080fd5b348015603557600080fd5b50604c60048036038101906048919060c3565b604e565b005b8073ffffffffffffffffffffffffffffffffffffffff16ff5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000609582606c565b9050919050565b60a381608c565b811460ad57600080fd5b50565b60008135905060bd81609c565b92915050565b60006020828403121560d65760d56067565b5b600060e28482850160b0565b9150509291505056fea2646970667358221220ab9c90214a59e7e50a73a844ca4b33694381e844c696b26d1e1d107e3f195acd64736f6c63430008120033";

type SimpleAttackConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleAttackConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleAttack__factory extends ContractFactory {
  constructor(...args: SimpleAttackConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<SimpleAttack> {
    return super.deploy(overrides || {}) as Promise<SimpleAttack>;
  }
  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SimpleAttack {
    return super.attach(address) as SimpleAttack;
  }
  override connect(signer: Signer): SimpleAttack__factory {
    return super.connect(signer) as SimpleAttack__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleAttackInterface {
    return new utils.Interface(_abi) as SimpleAttackInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleAttack {
    return new Contract(address, _abi, signerOrProvider) as SimpleAttack;
  }
}
