/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CoinFlipAttack,
  CoinFlipAttackInterface,
} from "../../CoinFlip.sol/CoinFlipAttack";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_victim",
        type: "address",
      },
    ],
    name: "attack",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040527f800000000000000000000000000000000000000000000000000000000000000060005534801561003457600080fd5b5061034d806100446000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d018db3e14610030575b600080fd5b61004a6004803603810190610045919061018e565b610060565b60405161005791906101d6565b60405180910390f35b6000808290506000600143610075919061022a565b4060001c9050600080548261008a919061028d565b905060006001821461009d5760006100a0565b60015b90508373ffffffffffffffffffffffffffffffffffffffff16631d263f67826040518263ffffffff1660e01b81526004016100db91906101d6565b6020604051808303816000875af11580156100fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011e91906102ea565b5080945050505050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061015b82610130565b9050919050565b61016b81610150565b811461017657600080fd5b50565b60008135905061018881610162565b92915050565b6000602082840312156101a4576101a361012b565b5b60006101b284828501610179565b91505092915050565b60008115159050919050565b6101d0816101bb565b82525050565b60006020820190506101eb60008301846101c7565b92915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610235826101f1565b9150610240836101f1565b9250828203905081811115610258576102576101fb565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610298826101f1565b91506102a3836101f1565b9250826102b3576102b261025e565b5b828204905092915050565b6102c7816101bb565b81146102d257600080fd5b50565b6000815190506102e4816102be565b92915050565b600060208284031215610300576102ff61012b565b5b600061030e848285016102d5565b9150509291505056fea2646970667358221220f6dc9db3744e2d2d0d5031aa22d8dc0cb35db8e23c0cb8111443dfccf4652d7264736f6c63430008120033";

type CoinFlipAttackConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CoinFlipAttackConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CoinFlipAttack__factory extends ContractFactory {
  constructor(...args: CoinFlipAttackConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CoinFlipAttack> {
    return super.deploy(overrides || {}) as Promise<CoinFlipAttack>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CoinFlipAttack {
    return super.attach(address) as CoinFlipAttack;
  }
  override connect(signer: Signer): CoinFlipAttack__factory {
    return super.connect(signer) as CoinFlipAttack__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CoinFlipAttackInterface {
    return new utils.Interface(_abi) as CoinFlipAttackInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CoinFlipAttack {
    return new Contract(address, _abi, signerOrProvider) as CoinFlipAttack;
  }
}
